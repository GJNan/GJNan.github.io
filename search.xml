<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[iOS Runtime day1]]></title>
      <url>/2017/10/24/%E5%88%9D%E8%AF%86Runtime/</url>
      <content type="html"><![CDATA[<p><head><br>        <font size="6">初识 Runtime </font><br></head><br><br><br><br><strong>前言:什么是Method Swizzling,在iOS开发中他有什么作用?</strong></p>
<p>简单来说我们主要使用Method Swizzling来把系统的方法交换为我们自己的方法,从而给系统方法添加一些我们想要的功能。<br><strong>Methond Swizzling通用方法封装</strong></p>
<p>我们可以将Method Swizzling功能封装为类方法，作为NSObject的类别，这样我们后续调用也会方便些。</p>
<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import &lt;objc/runtime.h&gt;
@interface NSObject (Swizzling) 
+ (void)methodSwizzlingWithOriginalSelector:(SEL)originalSelector
                         bySwizzledSelector:(SEL)swizzledSelector;
@end</code></pre>
<pre><code>#import "NSObject+Swizzling.h"
@implementation NSObject (Swizzling)
+ (void)methodSwizzlingWithOriginalSelector:(SEL)originalSelector bySwizzledSelector:(SEL)swizzledSelector{
    Class class = [self class];
    //原有方法
    Method originalMethod = class_getInstanceMethod(class, originalSelector);
    //替换原有方法的新方法
    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);
    //先尝试給源SEL添加IMP，这里是为了避免源SEL没有实现IMP的情况
    BOOL didAddMethod = class_addMethod(class,originalSelector,
                                        method_getImplementation(swizzledMethod),
                                        method_getTypeEncoding(swizzledMethod));
    if (didAddMethod) {//添加成功：说明源SEL没有实现IMP，将源SEL的IMP替换到交换SEL的IMP
        class_replaceMethod(class,swizzledSelector,
                            method_getImplementation(originalMethod),
                            method_getTypeEncoding(originalMethod));
    } else {//添加失败：说明源SEL已经有IMP，直接将两个SEL的IMP交换即可
        method_exchangeImplementations(originalMethod, swizzledMethod);
    }
}
@end</code></pre>

<p></p><h6>⚠️补充知识点</h6><p></p>
<ul><br><li><br><h6>SEL、Method、IMP的含义及区别</h6><br><p>在运行时，类（Class）维护了一个消息分发列表来解决消息的正确发送。每一个消息列表的入口是一个方法（Method），这个方法映射了一对键值对，其中键是这个方法的名字（SEL），值是指向这个方法实现的函数指针 implementation（IMP）。<br>伪代码表示：</p><br><pre><code>Class {<br>      MethodList (<br>                  Method{<br>                      SEL:IMP；<br>                  }<br>                  Method{<br>                      SEL:IMP；<br>                  }<br>                  );<br>      };</code></pre><br><p>Method Swizzling就是改变类的消息分发列表来让消息解析时从一个选择器（SEL）对应到另外一个的实现（IMP），同时将原始的方法实现混淆到一个新的选择器（SEL）。</p><br></li><br><li><br><h6>为什么要添加didAddMethod判断？</h6><br><p>先尝试添加原SEL其实是为了做一层保护，因为如果这个类没有实现originalSelector，但其父类实现了，那class_getInstanceMethod会返回父类的方法。这样method_exchangeImplementations替换的是父类的那个方法，这当然不是我们想要的。所以我们先尝试添加 orginalSelector，如果已经存在，再用 method_exchangeImplementations 把原方法的实现跟新的方法实现给交换掉。<br>如果理解还不够透彻，我们可以进入runtime.h中查看class_addMethod源码解释：</p><br><pre><code>/<em>* 
</em> Adds a new method to a class with a given name and implementation.<br><em> 
</em> @param cls The class to which to add a method.<br><em> @param name A selector that specifies the name of the method being added.
</em> @param imp A function which is the implementation of the new method. The function must take at least two arguments—self and _cmd.<br><em> @param types An array of characters that describe the types of the arguments to the method. 
</em><br><em> @return YES if the method was added successfully, otherwise NO 
</em>  (for example, the class already contains a method implementation with that name).<br><em>
</em> @note class_addMethod will add an override of a superclass’s implementation,<br><em>  but will not replace an existing implementation in this class. 
</em>  To change an existing implementation, use method_setImplementation.<br>*/</code></pre><br><p>大概的意思就是我们可以通过class_addMethod为一个类添加方法（包括方法名称（SEL）和方法的实现（IMP）），返回值为BOOL类型，表示方法是否成功添加。<strong>需要注意的地方是class_addMethod会添加一个覆盖父类的实现，但不会取代原有类的实现。</strong>也就是说如果class_addMethod返回YES，说明子类中没有方法originalSelector，通过class_addMethod为其添加了方法originalSelector，并使其实现（IMP）为我们想要替换的实现。</p><br><pre><code>class_addMethod(class,originalSelector,<br>                                      method_getImplementation(swizzledMethod),<br>                                      method_getTypeEncoding(swizzledMethod));</code></pre><br><p>同时再将原有的实现（IMP）替换到swizzledMethod方法上，</p><br><pre><code>class_replaceMethod(class,swizzledSelector,<br>                          method_getImplementation(originalMethod),<br>                          method_getTypeEncoding(originalMethod));</code></pre><br><p>从而实现了方法的交换，并且未影响父类方法的实现。反之如果class_addMethod返回NO，说明子类中本身就具有方法originalSelector的实现，直接调用交换即可。</p><br><pre><code>method_exchangeImplementations(originalMethod, swizzledMethod);</code></pre><br><p><strong>这一部分内容比较绕口，希望大家可以耐下心来仔细反复阅读。</strong></p><br></li><br></ul>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS11一些适配问题;Masonry冲突问题]]></title>
      <url>/2017/10/24/iOS11%E4%B8%80%E4%BA%9B%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98;Masonry%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>#iOS11 方面</p>
<p>##针对contentlnset</p>
<p>###在AppDelegate.m中写</p>
<blockquote>
<p>if (@available(iOS 11, *)) {<br>    [UIScrollView appearance].contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;<br>}</p>
</blockquote>
<p>#导航栏变化</p>
<p>##导航栏高度变化</p>
<p>####导航栏在iOS10之前都是默认的64P，但是，到了iOS10就不单单是64P了，可以看一下系统的信息应用程序，在iOS11添加了大标题，效果如下图:<br><img src="http://chuantu.biz/t6/109/1508812823x974305605.png" alt=""></p>
<p>####导航栏的结构<br><img src="http://chuantu.biz/t6/109/1508812915x974305605.png" alt=""><br>    <div class="text" style=" text-align:center;">图片1</div><br>    <br><br><br><img src="http://chuantu.biz/t6/109/1508812979x974305605.png" alt=""><br>    <div class="text" style=" text-align:center;">图片2</div><br>        <br><br><br><img src="http://chuantu.biz/t6/109/1508813002x974305605.png" alt=""><br>    <div class="text" style=" text-align:center;">图片3</div></p>
<p>####在上面三幅图可以知道，在iOS11导航栏多了一个LargeTitleView，专门显示大字标题用的，整个导航栏的高度达到了96P，这不包括状态栏的高度，也就是说，整个应用程序顶部高度达到了116p，其中statusbar = 20，title = 44，largetitle = 52，<font color="#FF0000"> 不过默认是64p</font>;当然，iPhoneX的高度会更高点，如果不显示大字标题，<font color="#FF0000">顶部的高度也达到了88</font>，statusbar = 44，title = 44，如果显示大字标题，则高度变成了140，statusbar = 44，title = 44，largetitle = 52，也就是说，iPhoneX的刘海高度为24p，大字标题如下图：</p>
<p><img src="http://chuantu.biz/t6/109/1508813131x2890149655.png" alt=""><br><img src="http://chuantu.biz/t6/109/1508813195x974305605.png" alt=""><br>    <div class="text" style=" text-align:center;">图片4</div><br>        <br><br></p>
<p>##导航栏图层变化</p>
<p>####iOS11之前导航栏的标题是添加在UINavigationItemView上面，而navigationBarButton则直接添加在的导航栏上面;如果设置了titleview的，则titleview的也是直接添加在的导航栏上面，如图5：<br><img src="http://chuantu.biz/t6/109/1508814425x2890149655.png" alt=""><br>    <div class="text" style=" text-align:center;">图片5</div><br>        <br><br></p>
<p>####在iOS11之后，苹果添加了新的类来管理，的导航栏会添加在_UIButtonBarStackView上面，而_UIButtonBarStackView则添加在_UINavigationBarContentView上面;如果没有给titleview的赋值，则titleview的会直接添加在_UINavigationBarContentView上面，如果赋值给了titleview的，则会新生成_UITAMICAdaptorView，把titleview的添加在这个类上面，这个类会添加在_UINavigationBarContentView上面，如下图6,7：<br><img src="http://chuantu.biz/t6/109/1508814605x974305605.png" alt=""><br>    <div class="text" style=" text-align:center;">图片6</div><br>        <br><br><br><img src="http://chuantu.biz/t6/109/1508814639x974305605.png" alt=""><br>    <div class="text" style=" text-align:center;">图片7</div><br>        <br><br></p>
<p>##导航栏的边距变化</p>
<p>####在iOS11对导航栏里面的物品的边距也做了调整:</p>
<ol>
<li>如果只是设置了titleview的,没有设置barbutton,把tileview的宽度设置为屏幕的宽度,则titleview的距离屏幕的边距,在iOS11前,在iPhone6p之前是16P;iOS11之后,在ipone6p上是12P,在ipone6p之前是8P。</li>
<li><p>如果只是设置了barbutton，没有设置titleview的，则在iOS11里，barButton距离屏幕的边距是20P和16P;在iOS11之前，barButton距离屏幕的边距也是20P和16P。</p>
</li>
<li><p>如果同时设置了barbutton和titleview,则在iOS11之前，titleview的和barbutton之间的间距是6P，在iOS11上titleview的和barbutton之间无间距。<br><img src="http://chuantu.biz/t6/109/1508815586x974305605.png" alt=""></p>
</li>
</ol>
<p>附简书原文链接:<a href="http://www.jianshu.com/p/18374fbdb972" target="_blank" rel="external">原文链接</a></p>
<h1 id="masonry约束出错-当约束冲突又找不到是哪几个view时"><a href="#masonry约束出错-当约束冲突又找不到是哪几个view时" class="headerlink" title="masonry约束出错(当约束冲突又找不到是哪几个view时)"></a>masonry约束出错(当约束冲突又找不到是哪几个view时)</h1><p>##可以设置key值 </p>
<p>###self.view.mas_key = @”self.view”</p>
<p>###otherview.mas_key = @”otherview”</p>
<p>##当view太多时可以用Masonry提供的批量设置的宏 MASAttachKeys</p>
<blockquote>
<p>  MASAttachKeys(self.singImg,self.contextLabel,self.TitleLabel)</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让我们来简单操作下hexo]]></title>
      <url>/2017/10/20/%E6%93%8D%E4%BD%9CHexo%E5%86%99%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>萌新写着玩的,只是方便自己查看~~</p>
</blockquote>
<p>#Markdown语法</p>
<p>#####!attention: &amp;_&amp; -&gt; )</p>
<p>##<em>插入链接</em></p>
<p>[百度链接](<a href="http://baidu.com&amp;_&amp;" target="_blank" rel="external">http://baidu.com&amp;_&amp;</a></p>
<p><a href="http://baidu.com" target="_blank" rel="external">百度链接</a></p>
<p>This is [an example](<a href="http://example.com/" target="_blank" rel="external">http://example.com/</a> “Title”&amp;_&amp;   inline link.</p>
<p><a href="http://example.net/" target="_blank" rel="external">This link</a> has no title attribute.</p>
<p>##<em>列表</em><br><img src="http://upload-images.jianshu.io/upload_images/1060239-9bc4e51e2a10637a.jpg?imageMogr2/auto-orient/strip" alt=""></p>
<p>##<em>图片与链接</em><br>图片:![](图片地址&amp;_&amp; 图片地址可以使本地图片路径，或者图片网址</p>
<p>网址：详情看下图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1060239-35ba85ee9c780482.jpg?imageMogr2/auto-orient/strip" alt="p3"></p>
<p>#<strong>HTML标签插入音乐/视频</strong></p>
<blockquote>
<p>引用自简书作者:Login926  <a href="http://www.jianshu.com/u/fb4020fff909" target="_blank" rel="external">原文链接</a></p>
</blockquote>
<p>#####!attention:&amp;_&amp; -&gt; &gt;</p>
<p>##video</p>
<video width="480" height="320" controls&_&="" <source="" src="movie.mp4" &_&="" <="" video&_&="" <video="" controls><br><source src="http://video.acfun.cn/0100400204000059E95FD000010000090000000000-0000-0000-01BD-070800000000.mp4?customer_id=5859fdaee4b0eaf5dd325b91&start=0.0&auth_key=1508494303-101011252902e48b04be3a884328cb67435e41d11f65rpcx1258p18p185p997c5f79d573146-ACFUN-b6e062c4fbd528f97e755ea127df66ae"><br></video>

<p>##<embed>标签举例：</p>
<embed src="http://player.youku.com/player.php/Type/Folder/Fid/27690810/Ob/1/sid/XMTY1MTI3NjMyNA==/v.swf" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" allowfullscreen="true" mode="transparent" type="application/x-shockwave-flash" &_&="" <="" embed="" <embed="">

<p>##<iframe>标签举例:(常用)<br>\iframe + height + width + src”” + frameborder + allowfullscreen\</iframe></p>
<p><iframe height="498" width="510" src="http://video.acfun.cn/0100400204000059E95FD000010000090000000000-0000-0000-01BD-070800000000.mp4?customer_id=5859fdaee4b0eaf5dd325b91&start=0.0&auth_key=1508494303-101011252902e48b04be3a884328cb67435e41d11f65rpcx1258p18p185p997c5f79d573146-ACFUN-b6e062c4fbd528f97e755ea127df66ae" frameborder="0" allowfullscreen></iframe></p>
<p>##javascript标签举例</p>
<p>\script type=”text/javascript” src=”<a href="http://www.xiami.com/widget/player-single?uid=32329501&amp;sid=1776238762&amp;mode=js&quot;&gt;" target="_blank" rel="external">http://www.xiami.com/widget/player-single?uid=32329501&amp;sid=1776238762&amp;mode=js&quot;&gt;</a>&lt;/script\</p>
<script type="text/javascript" src="http://www.xiami.com/widget/player-single?uid=32329501&sid=1776238762&mode=js"></script>]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The first article]]></title>
      <url>/2017/10/20/The%20first%20article/</url>
      <content type="html"><![CDATA[<p>Hi I`am Nan, welcome to my hut,i am a Apple developer so i will write some articles about iOS.i also will write some life articles,HHH.Last,Thank you all for coming.</p>
<iframe height="44" width="300" src="http://m10.music.126.net/20171020152442/acb8ead545b1c1353bc2a13039da1cb7/ymusic/f5cf/5f7d/6fdc/1130474326e5d20435e6bad2b3015e8f.mp3" frameborder="0" allowfullscreen><br></iframe>  ]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hello World </tag>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
